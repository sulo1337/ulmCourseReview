[{"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/index.js":"1","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/reportWebVitals.js":"2","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/App.js":"3","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/theme.js":"4","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Dashboard.js":"5","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Register.js":"6","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Home.js":"7","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Login.js":"8","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/SearchPage.js":"9","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/ReviewItem.js":"10","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/NavBar.js":"11","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/SearchBar.js":"12","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/js/store/index.js":"13","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/js/reducers/index.js":"14","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/AddReview.js":"15"},{"size":623,"mtime":1609133295824,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1608773014050,"results":"18","hashOfConfig":"17"},{"size":1883,"mtime":1609133091205,"results":"19","hashOfConfig":"17"},{"size":13813,"mtime":1608776629645,"results":"20","hashOfConfig":"17"},{"size":4734,"mtime":1609134017715,"results":"21","hashOfConfig":"17"},{"size":5166,"mtime":1609132847189,"results":"22","hashOfConfig":"17"},{"size":1521,"mtime":1609054046719,"results":"23","hashOfConfig":"17"},{"size":3131,"mtime":1609051030232,"results":"24","hashOfConfig":"17"},{"size":3656,"mtime":1609133260871,"results":"25","hashOfConfig":"17"},{"size":4112,"mtime":1609126263523,"results":"26","hashOfConfig":"17"},{"size":2263,"mtime":1609124867510,"results":"27","hashOfConfig":"17"},{"size":1514,"mtime":1609116322351,"results":"28","hashOfConfig":"17"},{"size":171,"mtime":1609119743831,"results":"29","hashOfConfig":"17"},{"size":671,"mtime":1609124270074,"results":"30","hashOfConfig":"17"},{"size":12282,"mtime":1609135057007,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1pzhkj1",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/index.js",[],["65","66"],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/reportWebVitals.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/App.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/theme.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Dashboard.js",["67"],"import axios from 'axios';\nimport { Box, Grid, Heading, Tabs, Tab } from 'grommet';\nimport React, { useEffect, useState } from 'react';\nimport { RouterContext } from '../App';\nimport NavBar from '../Components/NavBar';\nimport ReviewItem from '../Components/ReviewItem';\nimport SearchBar from '../Components/SearchBar';\nimport { connect } from 'react-redux';\nimport store from '../js/store/index';\nimport AddReview from '../Components/AddReview';\nconst Dashboard = (props) => {\n    const { push } = React.useContext(RouterContext);\n    const dispatch = props.dispatch;\n    //eslint-disable-next-line\n    let reviews = props.myreviews;\n    const [name, setName] = useState(\"\");\n    const reviewItems = reviews.map((review) => {\n        return (<ReviewItem key={review._id} review={review} editable={true} />);\n    });\n    const prof = props.professors;\n    const course = props.courses;\n\n    useEffect(() => {\n        const authtoken = localStorage.getItem('x-auth-token');\n        if (!authtoken) {\n            push('/index');\n            return;\n        }\n        setName(localStorage.getItem('fname'));\n        const currentState = store.getState();\n        if (currentState.myreviews.length !== 0 && currentState.professors.length !== 0 && currentState.courses.length !== 0) {\n\n            return;\n        }\n\n        const url = \"http://localhost:5000/api/review/my\";\n        const profurl = \"http://localhost:5000/api/professor\";\n        const courseurl = \"http://localhost:5000/api/course\";\n\n        const myReviewsReq = axios.get(url, {\n            headers: {\n                \"x-auth-token\": authtoken,\n            }\n        });\n        const profReq = axios.get(profurl);\n        const courseReq = axios.get(courseurl);\n\n        axios.all([myReviewsReq, profReq, courseReq]).then(axios.spread((...responses) => {\n            const myReviewsRes = responses[0];\n            const profRes = responses[1];\n            const courseRes = responses[2];\n            dispatch({\n                type: \"UPDATE_MYREVIEWS\",\n                payload: myReviewsRes.data\n            })\n\n            const profArray = profRes.data.map(p => {\n                return ({\n                    id: p._id,\n                    name: p.fname + \" \" + p.lname,\n                    type: \"professor\"\n                })\n            });\n\n            const courseArray = courseRes.data.map(c => {\n                return ({\n                    id: c._id,\n                    name: c.ccode,\n                    type: \"course\"\n                })\n            });\n\n            dispatch({\n                type: \"UPDATE_COURSES\",\n                payload: courseArray\n            });\n\n            dispatch({\n                type: \"UPDATE_PROFESSORS\",\n                payload: profArray\n            })\n        })).catch(err => {\n            console.log(err.message);\n            localStorage.removeItem('x-auth-token');\n            localStorage.removeItem('fname');\n            push('/index');\n        });\n    }, []);\n\n    const handleSearch = (item) => {\n        localStorage.setItem('searchId', item.id);\n        localStorage.setItem('searchType', item.type);\n        push('/search');\n    }\n\n    return (\n        <Box align=\"center\" flex=\"grow\" wrap={false}>\n            <NavBar />\n\n            <Tabs width=\"large\">\n                <Tab title=\"My Reviews\">\n                    <Box align=\"start\" justify=\"start\" fill=\"vertical\" width=\"large\" pad=\"medium\" direction=\"column\" wrap={false} overflow=\"visible\" height=\"xxlarge\">\n                        <SearchBar prof={prof} course={course} handleSearch={handleSearch} />\n                        <Box align=\"start\" justify=\"center\">\n                            <Box align=\"start\" justify=\"start\" direction=\"column\">\n                                <Heading level=\"3\" textAlign=\"start\" margin=\"small\">\n                                    Hi {name}, here are your reviews\n              </Heading>\n                            </Box>\n                            <Box align=\"center\" justify=\"center\">\n                                <Grid columns={{ \"size\": [\"small\", \"large\"], \"count\": \"fit\" }} gap=\"medium\" pad=\"small\">\n                                    {reviewItems}\n                                </Grid>\n                            </Box>\n                        </Box>\n                    </Box>\n                </Tab>\n                <Tab title=\"Add a Review\">\n                    <Box pad=\"medium\">\n                        <AddReview />\n                    </Box>\n                </Tab>\n            </Tabs>\n        </Box>\n    )\n}\n\nconst mapStateToProps = state => ({\n    professors: state.professors,\n    courses: state.courses,\n    myreviews: state.myreviews\n});\n\nexport default connect(mapStateToProps)(Dashboard);","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Register.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Home.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/Login.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Views/SearchPage.js",["68"],"import { Box, Grid, Heading, Select } from 'grommet';\nimport React, { useEffect, useState } from 'react';\nimport NavBar from '../Components/NavBar';\nimport ReviewItem from '../Components/ReviewItem';\nimport { RouterContext } from '../App';\nimport SearchBar from '../Components/SearchBar';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\n\nconst SearchPage = (props) => {\n    const { push } = React.useContext(RouterContext);\n\n    const [reviews, setReviews] = useState([]);\n    const [reviewFor, setReviewFor] = useState(\"\");\n    const reviewItems = reviews.map((review) => {\n        return (<ReviewItem key={review._id} review={review} />);\n    });\n    const prof = props.professors;\n    const course = props.courses;\n\n    const search = () => {\n        const searchType = localStorage.getItem('searchType');\n        const searchId = localStorage.getItem('searchId');\n        if (!searchType || !searchId) {\n            push(\"/dashboard\");\n            return;\n        }\n        const url = \"http://localhost:5000/api/review/\" + searchType + \"?id=\" + searchId;\n        axios.get(url)\n            .then(response => {\n                setReviews(response.data.reviews);\n                if (searchType === \"professor\") {\n                    setReviewFor(response.data.professor.fname + \" \" + response.data.professor.lname);\n                }\n\n                if (searchType === \"course\") {\n                    setReviewFor(response.data.course.ccode);\n                }\n            })\n            .catch(err => {\n                console.log(err.message);\n            })\n    }\n\n    useEffect(() => {\n        search();\n    }, []);\n\n    const handleSearch = (item) => {\n        localStorage.setItem('searchId', item.id);\n        localStorage.setItem('searchType', item.type);\n        search();\n    }\n    return (\n        <Box overflow=\"scroll\" align=\"center\" flex=\"grow\" wrap={false}>\n            <NavBar />\n            <Box align=\"start\" justify=\"start\" fill=\"vertical\" width=\"large\" pad=\"medium\" direction=\"column\" wrap={false}>\n                <Box align=\"center\" justify=\"center\" gap=\"small\" margin=\"small\">\n                    <SearchBar course={course} prof={prof} handleSearch={handleSearch} />\n                </Box>\n                <Box align=\"start\" justify=\"center\" pad=\"small\">\n                    <Box align=\"start\" justify=\"start\" direction=\"column\" gap=\"xxsmall\">\n                        <Box align=\"center\" justify=\"center\">\n                            <Heading level=\"3\" textAlign=\"start\" margin={{ \"top\": \"xsmall\", \"vertical\": \"xsmall\", \"horizontal\": \"none\", \"bottom\": \"xsmall\", \"left\": \"none\", \"right\": \"none\" }}>\n                                Reviews For {reviewFor}\n                            </Heading>\n                        </Box>\n                        <Box align=\"center\" justify=\"center\" margin={{ \"bottom\": \"medium\" }}>\n                            <Select options={[\"Most Recent\", \"Least Recent\", \"Top Rated\", \"Most Liked\"]} size=\"small\" plain={false} placeholder=\"Sort by\" />\n                        </Box>\n                    </Box>\n                    <Box align=\"center\" justify=\"center\">\n                        <Grid columns={{ \"size\": [\"small\", \"large\"], \"count\": \"fit\" }} gap=\"medium\" pad=\"xsmall\">\n                            {reviews.length !== 0 ? reviewItems : \"There are no reviews yet.\"}\n                        </Grid>\n                    </Box>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nconst mapStateToProps = state => ({\n    professors: state.professors,\n    courses: state.courses,\n    myreviews: state.myreviews\n});\n\nexport default connect(mapStateToProps)(SearchPage);","/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/ReviewItem.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/NavBar.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/SearchBar.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/js/store/index.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/js/reducers/index.js",[],"/home/sulochan/Development/Fullstack/ulmCourseReview/client/ulmcoursereviewclient/src/Components/AddReview.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":88,"column":8,"nodeType":"75","endLine":88,"endColumn":10,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":47,"column":8,"nodeType":"75","endLine":47,"endColumn":10,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'push'. Either include them or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch, push]",{"range":"87","text":"88"},"Update the dependencies array to be: [search]",{"range":"89","text":"90"},[2977,2979],"[dispatch, push]",[1637,1639],"[search]"]